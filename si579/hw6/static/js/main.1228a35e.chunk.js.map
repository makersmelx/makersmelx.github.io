{"version":3,"sources":["App.js","index.js"],"names":["Title","Typography","Text","Index","useState","word","setWord","outputTitle","setOutputTitle","result","setResult","synonymResult","setSynonymResult","loading","setLoading","mode","setMode","saved","setSaved","showRhyming","fetch","then","resp","json","data","ret","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","Array","from","keys","sort","key","groupBy","onKeyPress","event","code","level","length","join","span","value","onChange","target","type","onClick","Object","map","list","item","old","toString","showResult","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.1228a35e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Col, Input, Row, Typography } from 'antd';\n\nconst { Title, Text } = Typography;\n\nfunction groupBy(objects, property) {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== 'function') {\n    const propName = property;\n    property = (obj) => obj[propName];\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = property(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {};\n  for (const key of Array.from(groupedObjects.keys()).sort()) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n}\n\nconst Index = () => {\n  const [word, setWord] = useState('');\n  const [outputTitle, setOutputTitle] = useState('');\n  const [result, setResult] = useState(null);\n  const [synonymResult, setSynonymResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState(0);\n  const [saved, setSaved] = useState([]);\n  const showRhyming = () => {\n    setLoading(true);\n    setResult([]);\n    setOutputTitle(`Words that rhyme with ${word}:`);\n    fetch(\n      `https://api.datamuse.com/words?rel_rhy=${word}`)\n      .then(resp => resp.json())\n      .then(data => {\n        setLoading(false);\n        const ret = groupBy(data, 'numSyllables');\n        setResult(ret);\n        setMode(1);\n      });\n  };\n\n  const showSynonym = () => {\n    setLoading(true);\n    setSynonymResult([]);\n    setOutputTitle(`Words with a similar meaning to ${word}:`);\n    fetch(\n      `https://api.datamuse.com\t/words?ml=${word}`)\n      .then(resp => resp.json())\n      .then(data => {\n        setLoading(false);\n        setSynonymResult(data);\n        setMode(2);\n      });\n  };\n\n  const showResult = () => {\n    switch (mode) {\n      case 0:\n      default: {\n        return (\n          <div />\n        );\n      }\n      case 1: {\n        return (\n          <>\n            {\n              Object.keys(result).length === 0\n                ? <Text>(no results)</Text>\n                : Object.keys(result).map(key => {\n                  const list = result[key].map(item => {\n                    return (\n                      <li key={item.word}>\n                        <Text>{item.word}</Text>\n                        <Button\n                          onClick={() => {\n                            setSaved(old => [\n                              ...old,\n                              item.word\n                            ]);\n                          }}\n                        >\n                          (save)\n                        </Button>\n                      </li>\n                    );\n                  });\n                  return (\n                    <Row key={key.toString()}>\n                      <Col span={24}>\n                        <Title level={2}>\n                          {`${key} Syllable${key === '1' ? '' : 's'}`}\n                        </Title>\n                      </Col>\n                      <Col span={24}>\n                        <ul>\n                          {list}\n                        </ul>\n                      </Col>\n                    </Row>\n                  );\n                })}\n          </>\n        );\n      }\n      case 2: {\n        return (\n          <>\n            {\n              synonymResult.length === 0\n                ? <Text>(no results)</Text>\n                : <ul>\n                  {synonymResult.map(word => {\n                    return (\n                      <li key={word.word}>\n                        <Text>{word.word}</Text>\n                        <Button\n                          onClick={() => {\n                            setSaved(old => [\n                              ...old,\n                              word.word\n                            ]);\n                          }}\n                        >\n                          (save)\n                        </Button>\n                      </li>\n                    );\n                  })}\n                </ul>}\n          </>\n        );\n      }\n    }\n  };\n\n  const savedWords = () => (\n    saved.length === 0\n      ? <Text>Saved words: (none)</Text>\n      : <Text>Saved words: {saved.join(',')}</Text>\n  );\n\n  return (\n    <div\n      onKeyPress={(event) => {\n        if (event.code === 'Enter') {\n          showRhyming();\n        }\n      }}>\n      <Row>\n        <Title level={1}>Rhyme Finder (579 Problem Set 6)</Title>\n      </Row>\n      <Row>\n        <Text>{savedWords()}</Text>\n      </Row>\n      <Row>\n        <Col span={12}>\n          <Input\n            value={word}\n            onChange={(event) => {\n              setWord(event.target.value);\n            }}\n          />\n        </Col>\n        <Col>\n          <Button\n            type={'primary'}\n            onClick={showRhyming}\n          >\n            Show Rhyming Words\n          </Button>\n        </Col>\n        <Col>\n          <Button\n            onClick={showSynonym}\n          >\n            Show Synonyms\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Title level={2}>{outputTitle}</Title>\n      </Row>\n      {loading\n        ? <Text>...loading</Text>\n        : showResult()}\n    </div>\n  );\n};\n\nexport default Index;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}